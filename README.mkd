Setting up Madek with Ansible
=============================

**WORK IN PROGRESS** The deploy scriptes are being rewritten for Madek version 3.

Step by step procedure
----------------------

### Checkout / Upgrade the Master-Project

Checkout the Madek master-project `https://github.com/Madek/madek` including
submodules (recursively). See either Initial Checkout or Upgrading below.

Descend into the `deploy` directory and continue with configuration of the
inventory.

#### Initial Checkout

    git clone --recursive https://github.com/Madek/madek.git

#### Upgrading

The version which is going to be deployed is exactly the one that is checked
out in the master-project. So the master-project must be updated to upgrade
you installation of Madek. From within the master-project:

    git pull
    git submodule update --init --recursive

It is possible to run into troubles if the submodule structure has changed. The
following command might help. Backup your changes beforehand!

    git reset --hard origin/master && git clean --force -fd
    git submodule foreach --recursive 'git reset --hard HEAD && git clean --force -fdâ€™

You can as well start from scratch.


### Create your hosts configuration file

This and all the following steps are carried out from within the `deploy`
subdirectory.

The easiest way is to copy the provided `hosts_demo` file:

    cp hosts_demo my_hosts

Within the file `my_host` replace the word `demo` with `my_host` and adjust the
value of the ansible_ssh_host variable  ip of your madek server. If the ip is
10.0.0.1 the line should read:

    my_host ansible_ssh_host=10.0.0.1 ansible_ssh_user=root


### Install or Upgrade Madek

    ansible-playbook -i my_hosts play_setup-and-deploy.yml -e 'madek_master_secret=REPLACE-WITH-YOUR-SECRET'


### Create a Admin User and set the Password

    ansible-playbook -i my_hosts play_create-admin.yml -e 'admin_password=YOUR-SECRETE-PASSWORD madek_master_secret=REPLACE-WITH-YOUR-SECRET'

This will create (or update) a user with the login `admin` and the given
password.


Customization and Advanced Topics
---------------------------------

### The `madek_master_secret`

The setup generates a default `madek_master_secret` based on various properties
of the target host and your application. These properties might be guessable or
not, depending on the setup of your host. It is highly recommended to override
the generated secret as shown in the invocations above.

Alternatives to the command line arguments are variables defined in the Ansible
Inventory. This is convenient in particular in conjunction with the [Ansible
Vault].

Caveat: the [Ansible rules of precedence] should be understood when proceeding
in this manner. At any rate, invoking

    ansible-playbook -i my_hosts play_info.yml

(possibly with augmented arguments) will show the actual used values and
is recommended to be consulted for confirmation.

  [Ansible rules of precedence]: http://docs.ansible.com/ansible/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable
  [Ansible Vault]: http://docs.ansible.com/ansible/playbooks_vault.html




### Web-Contexts

TODO

### Virtual Host Names

TODO

### Running multiple Instances of Madek within one Host

**We highly recommend not to run multiple instances in a single host**.  It is
possible but the setup is intricate and prone to cause interference between the
applications unless the administrator has a very deep knowledge of Madek itself
and of the internals of the Madek deployment and setup process. We ourself only
use this possibility for testing etc.

A minimal list of things to do:

* Override the following vars with appropriate values:
    * `madek_base_name`
    * `madek_web_context` and/or `madek_host_name`
    * `madek_webapp_port` and `madek_api_port`

#### Caveats

* Contexts can shadow routes used by madek, e.g. `/my` (as used by
    the dashboard) is likely to cause conflicts.

* Order of contexts matters: adjust the order of lines in
    `/etc/apache2/shared/YOUR-HOST-NAME_apps.conf` if any context shadows
    others, e.g. `/madek2` must come before `/` or the Madek instance
    under `/` will shadow any paths and `/madek2` can not be reached.

* The `madek_base_name` must be unique per instance. It is used for user and
    entity names (system, database, ...) and as part of paths. The value is not
    escaped and characters which are likely to cause problems in these contexts
    should be avoided.


### Resetting the Data from Production `test.madek`

** THIS IS OUTDATED**
TODO


Resetting the data from the last production dump is conditional and needs to
explicitly requested, e.g.:

    ansible-playbook -i hosts_zhdk-test play_setup-and-deploy.yml -e 'reset_data=True'

Be aware:

* Running the migrations, and hence the whole deploy, will take more than 2 hours.
* Resetting the data is required if migrations are mutated.


### Configure the Color Scheme

TODO

** THIS IS OUTDATED AND CURRENTLY BROKEN / NOT POSSIBLE **


Madek comes with 4 predefined color schemes: green, red, blue and mono. The
color scheme can be configured by setting the `color_scheme` variable.
You can also set a `custom_color` variable to a valid CSS color, which will
override the main color *on top of* the chosen scheme.

This is most conveniently performed in the variables file for your specific host.
See `host_vars/test-vm` for example.


### Configure Zencoder

TODO

** THIS IS OUTDATED AND CURRENTLY NOT POSSIBLE **


Set the `zencoder_enabled` variable in your host file to `True`, and
the `zencoder_test_mode` to your desired value (probably `False`).

    zencoder_enabled: True
    zencoder_test_mode: False

Keep these parameters in the hosts file. Run the setup-and-deploy play
with an additional parameter specifying your zencoder api-key:

    ansible-playbook  -i hosts play_setup-and-deploy.yml -e 'zencoder_api_key=YOUR-ZENCODER-API-KEY'

Note: The *setup-and-deploy* playbook will remember the
`zencoder_api_key`. There is no need to specify it again when the
setup-and-deploy playbook will be run in the future, to upgrade your
madek installation e.g.


### Configure Newrelic Application Monitoring

TODO

** THIS IS OUTDATED AND CURRENTLY NOT POSSIBLE **

Perform the following once:

    ansible-playbook  -i hosts play_setup-and-deploy.yml -e 'newrelic_key=YOUR-NEWRELIC-KEY'


